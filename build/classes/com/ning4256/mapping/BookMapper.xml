<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名，这样就能够保证namespace的值是唯一的 
	例如namespace="me.gacl.mapping.userMapper"就是me.gacl.mapping(包名)+userMapper(userMapper.xml文件去除后缀) -->
<mapper namespace="com.ning4256.mapping.BookMapper">
	<!-- 在select标签中编写查询的SQL语句， 设置select标签的id属性为getUser，id属性值必须是唯一的，不能够重复 使用parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型 
		resultType="me.gacl.domain.User"就表示将查询结果封装成一个User类的对象返回 User类就是users表所对应的实体类 -->

	<!-- 开启二级缓存 -->
	<cache></cache>
	<!-- 根据id查询得到一个book对象 -->
	<select id="getBookById" parameterType="int" resultType="_BOOK">
		select * from book where book_id=#{book_id}
	</select>

	<!-- 添加用户 -->
	<insert id="addBook" parameterType="_BOOK">
	insert into book(book_name, book_author, book_price, book_publish, book_date, book_des,book_count) values(#{book_name}, #{book_author}, #{book_price}, #{book_publish}, #{book_date}, #{book_des}, #{book_count});
	</insert>
	
	
	<!-- 删除用户 -->
	<delete id="deleteBookById" parameterType="int">
		delete from book where book_id=#{book_id}
	</delete>
	
	<!-- 修改用户 -->
<!-- 	<update id="updateUser" parameterType="_USERS" >
		update users set name=#{name}, age=#{age} where id=#{id}
	</update> -->
	
	<!-- 查询表的所有信息 -->
	<select id="getAllBook" parameterType="int" resultType="_BOOK">
		select * from book
	</select>
</mapper>